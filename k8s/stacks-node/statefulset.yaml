---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  labels:
    app.kubernetes.io/name: stacks-node
    app.kubernetes.io/part-of: orchestra
    app.kubernetes.io/component: stacks
    app.kubernetes.io/env: development
  name:  stacks-node
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: stacks-node
      app.kubernetes.io/part-of: orchestra
      app.kubernetes.io/component: stacks
      app.kubernetes.io/env: development
  serviceName: stacks-node
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: stacks-node
        app.kubernetes.io/part-of: orchestra
        app.kubernetes.io/component: stacks
        app.kubernetes.io/env: development
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: DoesNotExist
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: stacks-node-miner
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: stacks-node
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: stacks-node-miner
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: stacks-node
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
      containers:
      - name: stacks-node
        image: blockstack/stacks-blockchain:2.05.0.2.0-rc2-stretch
        imagePullPolicy: Always
        command: ["/bin/stacks-node"]
        args: ["start", "--config", "/src/stacks-node/Config.toml"]
        env:
        - name: RUST_BACKTRACE
          value: "full"
        - name: STACKS_LOG_DEBUG
          value: "1"
        - name: STACKS_LOG_JSON
          value: "1"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "1"
        securityContext:
          capabilities:
            add:
            - SYS_PTRACE
            - SYS_ADMIN
        ports:
        - containerPort: 20443
          name: rpc
        - containerPort: 20444
          name: p2p
        - containerPort: 9153
          name: metrics
        volumeMounts:
            - name: stacks-node-data
              mountPath: /root/stacks-node/data
            - name: stacks-node-config
              mountPath: /src/stacks-node
      volumes:
        - name: stacks-node-data
          persistentVolumeClaim:
            claimName: stacks-node-data
        - name: stacks-node-config
          configMap:
            name: stacks-node-config
  volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/name: stacks-node
          app.kubernetes.io/part-of: orchestra
          app.kubernetes.io/component: api
          app.kubernetes.io/env: development
        name: stacks-node-data
        namespace: default
      spec:
        accessModes: ["ReadWriteOnce"]
        dataSource:
          name: stacks-node-data-base
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        resources:
          requests:
            storage: 50Gi
